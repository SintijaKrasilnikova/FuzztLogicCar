Included commented out sections


references
rock- https://www.vexels.com/png-svg/preview/145817/rock-stone
car- https://opengameart.org/content/red-car-top-down

///////////////////////////////////////
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


using FLS;
using FLS.Rules;
using FLS.MembershipFunctions;

public class FuzzyBox : MonoBehaviour {

	bool selected = false;

    public GameObject fallowObject;

	IFuzzyEngine engine;
	LinguisticVariable distance;
	LinguisticVariable direction;
	LinguisticVariable speed;

    public float highValue = 100f;
    public float midValue = 50f;

    public float highValueSpeed = 200f;
    public float lowValueSpeed = 100f;

    void Start()
	{
        // Here we need to setup the Fuzzy Inference System

        //distance variables
        //distance = new LinguisticVariable("distance");
        //var farRight = distance.MembershipFunctions.AddTrapezoid("farRight", -100, -100, -50, -50);

        //var right = distance.MembershipFunctions.AddTrapezoid("right", -50, -50, -5, -1);
        //var none = distance.MembershipFunctions.AddTrapezoid("none", -5, -0.5, 0.5, 5);
        //var left = distance.MembershipFunctions.AddTrapezoid("left", 1, 5, 50, 50);

        //var farLeft = distance.MembershipFunctions.AddTrapezoid("farLeft", 50, 50, 100, 100);

        distance = new LinguisticVariable("distance");
        var farRight = distance.MembershipFunctions.AddTrapezoid("farRight", -highValue, -highValue, -midValue, -midValue);

        var right = distance.MembershipFunctions.AddTrapezoid("right", -midValue, -midValue, -1.5, -1);
        var none = distance.MembershipFunctions.AddTrapezoid("none", -1.5, -0.5, 0.5, 1.5);
        var left = distance.MembershipFunctions.AddTrapezoid("left", 1, 1.5, midValue, midValue);

        var farLeft = distance.MembershipFunctions.AddTrapezoid("farLeft", midValue, midValue, highValue, highValue);


        //direction variables
        //direction = new LinguisticVariable("direction");

        //var d_farRight = direction.MembershipFunctions.AddTrapezoid("farRight", -100, -100, -50, -50);

        //var d_right = direction.MembershipFunctions.AddTrapezoid("right", -50, -50, -5, -1);
        //var d_none = direction.MembershipFunctions.AddTrapezoid("none", -5, -0.5, 0.5, 5);
        //var d_left = direction.MembershipFunctions.AddTrapezoid("left", 1, 5, 50, 50);

        //var d_farLeft = direction.MembershipFunctions.AddTrapezoid("farLeft", 50, 50, 100, 100);

        direction = new LinguisticVariable("direction");

        var d_farRight = direction.MembershipFunctions.AddTrapezoid("farRight", -highValue, -highValue, -midValue, -midValue);

        var d_right = direction.MembershipFunctions.AddTrapezoid("right", -midValue, -midValue, -1.5, -1);
        var d_none = direction.MembershipFunctions.AddTrapezoid("none", -1.5, -0.5, 0.5, 1.5);
        var d_left = direction.MembershipFunctions.AddTrapezoid("left", 1, 1.5, midValue, midValue);

        var d_farLeft = direction.MembershipFunctions.AddTrapezoid("farLeft", midValue, midValue, highValue, highValue);

        speed = new LinguisticVariable("speed");

        //var s_fastSpeed = speed.MembershipFunctions.AddTrapezoid("fastSpeed", -highValueSpeed, -highValueSpeed, -lowValueSpeed, -lowValueSpeed);
        //var s_midSpeed = speed.MembershipFunctions.AddTrapezoid("midSpeed", -lowValueSpeed, -lowValueSpeed, -0.2, -0.2);
        //var s_noSpeed = speed.MembershipFunctions.AddTrapezoid("noSpeed", -0.2, -0.1, 0.1, 0.2);
        //var s_midSpeedLeft = speed.MembershipFunctions.AddTrapezoid("midSpeedLeft", 0.2, 0.2, lowValueSpeed, lowValueSpeed);
        //var s_fastSpeedLeft = speed.MembershipFunctions.AddTrapezoid("fastSpeedLeft", lowValueSpeed, lowValueSpeed, highValueSpeed, highValueSpeed);

        
        
        var s_slowSpeed = speed.MembershipFunctions.AddTrapezoid("slowSpeed", 0.1, 0.1, 10.0, 15.0);
        var s_midSpeed = speed.MembershipFunctions.AddTrapezoid("mediumSpeed", 10.0, 15.0, 25.0, 30.0);
        var s_fastSpeed = speed.MembershipFunctions.AddTrapezoid("fastSpeed", 25.0, 30.0, 40, 40);

        //var s_rightHigh = speed.MembershipFunctions.AddTrapezoid("speedRightHigh", -highValueSpeed, -highValueSpeed, -lowValueSpeed, -lowValueSpeed);
        //var s_right = speed.MembershipFunctions.AddTrapezoid("speedRight", -midValue, -midValue, -5, -1);
        //var s_none = speed.MembershipFunctions.AddTrapezoid("speedNone", -5, -0.5, 0.5, 5);
        //var s_left = speed.MembershipFunctions.AddTrapezoid("speedLeft", 1, 5, midValue, midValue);
        //var s_leftHigh = speed.MembershipFunctions.AddTrapezoid("speedLeftHigh", 1, 5, highValueSpeed, highValueSpeed);

        //engine
        engine = new FuzzyEngineFactory().Default();

        //moving the box back to the centre
        //var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left));//move to the left
        //var rule2 = Rule.If(distance.Is(left)).Then(direction.Is(d_right));//move to the right
        //var rule3 = Rule.If(distance.Is(none)).Then(direction.Is(d_none));//doesnt move


        //var rule0 = Rule.If(distance.Is(farRight)).Then(direction.Is(d_farLeft)).Then(speed.Is(s_leftHigh));
        //var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left)).Then(speed.Is(s_left));//move to the left
        //var rule2 = Rule.If(distance.Is(left)).Then(direction.Is(d_right)).Then(speed.Is(s_right));//move to the right
        //var rule3 = Rule.If(distance.Is(none)).Then(direction.Is(d_none)).Then(speed.Is(s_none));//doesnt move
        //var rule4 = Rule.If(distance.Is(farLeft)).Then(direction.Is(d_farRight)).Then(speed.Is(s_rightHigh));

        var rule0 = Rule.If(distance.Is(farRight)).Then(direction.Is(d_farLeft));
        var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left));//move to the left
        var rule2 = Rule.If(distance.Is(left)).Then(direction.Is(d_right));//move to the right
        var rule3 = Rule.If(distance.Is(none)).Then(direction.Is(d_none));//doesnt move
        var rule4 = Rule.If(distance.Is(farLeft)).Then(direction.Is(d_farRight));

        //var rule0 = Rule.If(distance.Is(farRight)).Then(direction.Is(d_farLeft)).Then(speed.Is(s_fastSpeedLeft));
        //var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left)).Then(speed.Is(s_midSpeedLeft));//move to the left
        //var rule2 = Rule.If(distance.Is(left)).Then(direction.Is(d_right)).Then(speed.Is(s_midSpeed));//move to the right
        //var rule3 = Rule.If(distance.Is(none)).Then(direction.Is(d_none)).Then(speed.Is(s_noSpeed));//doesnt move
        //var rule4 = Rule.If(distance.Is(farLeft)).Then(direction.Is(d_farRight)).Then(speed.Is(s_fastSpeed));

        //var rule0 = Rule.If(distance.Is(farRight)).Then(direction.Is(d_farLeft)).Then(speed.Is(s_fastSpeed));
        //var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left)).Then(speed.Is(s_midSpeed));//move to the left

        //var rule2 = Rule.If(distance.Is(none)).Then(direction.Is(d_none)).Then(speed.Is(s_noSpeed));//doesnt move

        //var rule3 = Rule.If(distance.Is(left)).Then(direction.Is(d_right)).Then(speed.Is(s_midSpeed));//move to the right
        //var rule4 = Rule.If(distance.Is(farLeft)).Then(direction.Is(d_farRight)).Then(speed.Is(s_fastSpeed));


        //engine.Rules.Add(rule1, rule2, rule3);//adding rules to the engine
        engine.Rules.Add(rule0, rule1, rule2, rule3, rule4);//adding rules to the engine


        //doeesnt break
        //var s_right = speed.MembershipFunctions.AddTrapezoid("speedRight", -midValue, -midValue, -5, -1);
        //var s_none = speed.MembershipFunctions.AddTrapezoid("speedNone", -5, -0.5, 0.5, 5);
        //var s_left = speed.MembershipFunctions.AddTrapezoid("speedLeft", 1, 5, midValue, midValue);

        //var rule0 = Rule.If(distance.Is(farRight)).Then(direction.Is(d_farLeft)).Then(speed.Is(s_left));
        //var rule1 = Rule.If(distance.Is(right)).Then(direction.Is(d_left)).Then(speed.Is(s_left));//move to the left
        //var rule2 = Rule.If(distance.Is(left)).Then(direction.Is(d_right)).Then(speed.Is(s_right));//move to the right
        //var rule3 = Rule.If(distance.Is(none)).Then(direction.Is(d_none)).Then(speed.Is(s_none));//doesnt move
        //var rule4 = Rule.If(distance.Is(farLeft)).Then(direction.Is(d_farRight)).Then(speed.Is(s_right));


    }

    void FixedUpdate()
	{
        //      if (!selected && this.transform.position.y < 0.6f)
        //      {
        //          // Convert position of box to value between 0 and 100
        //          //double result = 0.0;//doesnt move the box

        //          Rigidbody rigidbody = GetComponent<Rigidbody>();

        //          double result = engine.Defuzzify(new { distance = (double)this.transform.position.x, speed = (double)Mathf.Abs(rigidbody.velocity.x) });


        //          //double result = engine.Defuzzify(new { distance = (double)this.transform.position.x });
        //          //double result = engine.Defuzzify(new { distance = (double)this.transform.position.x }, new { speed = (double)rigidbody.velocity.x });
        //          //double result = engine.Defuzzify(new { distance = (double)this.transform.position.x });
        //          //double result = engine.Defuzzify(new { speed = (double)rigidbody.velocity.x });
        //          //double result = engine.Defuzzify(new { distance = (double)this.transform.position.x });
        //          //double speedResult = engine.Defuzzify(new { speed = (double)rigidbody.velocity.x });

        //          Debug.Log(result);

        //          rigidbody.AddForce(new Vector3((float)(result), 0f, 0f));

        //}

        if (this.transform.position.x != fallowObject.transform.position.x)
        {
            // Convert position of box to value between 0 and 100
            //double result = 0.0;//doesnt move the box

            Rigidbody rigidbody = GetComponent<Rigidbody>();

            double diff = this.transform.position.x - fallowObject.transform.position.x;
            double result = engine.Defuzzify(new { distance = (double)diff });
            //double result = engine.Defuzzify(new { distance = (double)diff, speed = (double)Mathf.Abs(rigidbody.velocity.x) });


            Debug.Log(result);

            rigidbody.AddForce(new Vector3((float)(result), 0f, 0f));

        }
    }
	
	// Update is called once per frame
	void Update () {
		//if (Input.GetMouseButtonDown(0)) {
		//	var hit = new RaycastHit();
		//	var ray = Camera.main.ScreenPointToRay(Input.mousePosition);

		//	if (Physics.Raycast(ray, out hit)){
		//		if (hit.transform.name == "FuzzyBox" )//Debug.Log( "You have clicked the FuzzyBox");
		//		selected = true;
		//	}
		//}

		//if(Input.GetMouseButton(0) && selected)
		//{
		//	float distanceToScreen = Camera.main.WorldToScreenPoint(gameObject.transform.position).z;
		//	Vector3 curPosition = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, distanceToScreen));
		//	transform.position = new Vector3(curPosition.x, Mathf.Max(0.5f, curPosition.y), transform.position.z);
		//}

		//if(Input.GetMouseButtonUp(0))
		//{
		//	selected = false;
		//}
	}
}
